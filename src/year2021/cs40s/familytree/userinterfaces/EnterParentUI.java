
/** Required package class namespace */
package year2021.cs40s.familytree.userinterfaces;

/** Required imports */
import year2021.cs40s.familytree.datastructures.Family;
import year2021.cs40s.familytree.datastructures.Globals;
import year2021.cs40s.familytree.datastructures.Person;


/**
 * EnterParentUI.java - This user interface (UI) is for selecting a male parent 
 * (father) or female parent (mother) from all the existing family members
 *
 * @author Mr. Wachs' student 
 * @since Mar. 17, 2021 
 */
public class EnterParentUI extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="All NetBeans Generated Code collapsed in NetBeans"> 
    
    /**
     * Creates new form EnterParentUI
     */
    public EnterParentUI(AddNewMemberUI parent, Family family,
            Person person, boolean isMale) {
        initComponents();
        startup(parent, family, person, isMale);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        list1 = new java.awt.List();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setText("Please select the male parent (father) already entered in this database:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 470, 50);
        getContentPane().add(list1);
        list1.setBounds(10, 60, 470, 250);

        jButton1.setText("CANCEL");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(250, 320, 230, 40);

        jButton2.setText("OK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 320, 230, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        ok();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        cancel();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeWindow();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 

    
    // Global variables (class properties) used by the class and its methods:
    private AddNewMemberUI parentUI;
    private Person         person;
    private Family         family;
    private boolean        isMale;
    
    
    /**
     * When the constructor for this class is call (when the UI appears), set
     * the staring conditions for this class
     * 
     * @param parentUI the user interface (UI) this UI came from 
     * @param family the family object this person is from
     * @param person the person object to assign a parent to
     * @param isMale flag for father (true) or mother (false)
     */
    private void startup(AddNewMemberUI parentUI, Family family, Person person,  
                         boolean isMale) {        
        // Assign the passed parameter references to the global properties 
        // (global variable references) of this class
        this.isMale   = isMale;
        this.parentUI = parentUI;
        this.family   = family;        
        this.person   = person;       
        
        // Update label based on father or mother
        if (isMale) {
            jLabel1.setText("Please select the male parent (father) "
                    + "already entered in this database:");
        }
        else {
            jLabel1.setText("Please select the female parent (mother) "
                    + "already entered in this database:");
        }
        
        // Update family names listbox and start up UI
        Globals.updateList(list1, family, person);
        Globals.startup(this, 507, 410);
    }

    /**
     * The associated code with the button to confirm the parent is added
     */
    private void ok() {
        int position = list1.getSelectedIndex();    // Get index from user click
        if (position == Globals.NOT_SELECTED) {     // User has not clicked
            Globals.dialogs.output(Globals.NAME_ERROR);     // prompt user
        }
        else if (list1.getSelectedItem().equals(Globals.SAME)) {
            Globals.dialogs.output(Globals.SELECT_ERROR);   // prompt user
        }
        else {                                      // User has made selction
            if (isMale) {                           
                // Male parent, assign this position to person from family
                person.parentMale = family.members.get(position);;
            }
            else {
                // Female parent, assign this position to person from family
                person.parentFemale = family.members.get(position);;
            }
            this.dispose();                             // Dispose this UI
            parentUI.setVisible(true);                  // Show other UI
        }
    }

    /**
     * The associated code with the button to cancel and reject the changes
     */
    private void cancel() {
        this.dispose();                             // Dispose this UI
        parentUI.setVisible(true);                  // Show other UI
    }

    /**
     * The associated code with the user closing this UI (by clicking the "X")
     */
    private void closeWindow() {
        Globals.end();
    }
    
}
