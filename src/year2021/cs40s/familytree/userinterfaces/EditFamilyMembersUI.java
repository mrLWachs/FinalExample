
/** Required package class namespace */
package year2021.cs40s.familytree.userinterfaces;

/** Required imports */
import year2021.cs40s.familytree.datastructures.Family;
import year2021.cs40s.familytree.datastructures.Globals;


/**
 * EditFamilyMembersUI.java - This user interface (UI) is to add, edit, or 
 * delete family members from the chosen family
 *
 * @author Mr. Wachs' student 
 * @since Mar. 17, 2021 
 */
public class EditFamilyMembersUI extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="All NetBeans Generated Code collapsed in NetBeans"> 
    
    /**
     * Creates new form EditFamilyMembersUI
     */
    public EditFamilyMembersUI(int index) {
        initComponents();
        startup(index);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        list1 = new java.awt.List();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);
        getContentPane().add(list1);
        list1.setBounds(10, 60, 340, 230);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel1.setText("Choose The Family Member:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 340, 40);

        jButton1.setText("Add New Family Member");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(360, 60, 250, 50);

        jButton2.setText("Edit Existing Family Member");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(360, 120, 250, 50);

        jButton3.setText("Delete Existing Family Member");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(360, 180, 250, 50);

        jButton4.setText("Return To Main Screen");
        jButton4.setToolTipText("");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4);
        jButton4.setBounds(360, 240, 250, 50);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        returnToMainScreen();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addNewFamilyMember();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        editExistingFamilyMember();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        deleteExistingFamilyMember();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeWindow();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 
    
    
    // Global variables (class properties) used by the class and its methods:
    private Family family;
    private int    index;
        
    
    /**
     * When the constructor for this class is call (when the UI appears), set
     * the staring conditions for this class
     * 
     * @param index the family index location in the linked list of families
     */
    private void startup(int index) {
        // Assign the passed parameter references to the global properties 
        // (global variable references) of this class
        this.index = index;
        
        // Get a reference to the family  
        this.family = Globals.families.get(index);
        
        // Update the label
        jLabel1.setText("Choose the member of the '" + family.name + 
                        "' Family : ");
        
        // Update listbox and start up this UI
        showList();
        Globals.startup(this, 633, 340);    
    }
    
    /**
     * Updates the list box with all family member names (this method can be 
     * called outside the class as it is 'public')
     */
    public void showList() {
        Globals.updateList(list1, family, null);
    }
        
    /**
     * The associated code with the button to add a new family member
     */
    private void addNewFamilyMember() {
        new AddNewMemberUI(this,index,Globals.NEW_ENTRY);   // Launch other UI
        this.setVisible(false);                             // Hide this UI
    }
    
    /**
     * The associated code with the button to editing an existing family member
     */
    private void editExistingFamilyMember() {
        int position = list1.getSelectedIndex();    // Get index from user click
        if (position == Globals.NOT_SELECTED) {     // User has not clicked
            Globals.dialogs.output(Globals.NAME_ERROR);     // prompt user
        }
        else {                                      // User has made selction
            new AddNewMemberUI(this,index,position);       // Launch other UI
            this.setVisible(false);                        // Hide this UI
        }
    }
    
    /**
     * The associated code with the button to delete a family member
     */
    private void deleteExistingFamilyMember() {
        int position = list1.getSelectedIndex();    // Get index from user click
        if (position == Globals.NOT_SELECTED) {     // User has not clicked
            Globals.dialogs.output(Globals.NAME_ERROR);     // prompt user
        }
        else {                                      // User has made selction
            String prompt = "Are you sure you want to delete this family ?";
            if (Globals.dialogs.yesNo(prompt)) {    // Confirm deletion
                list1.remove(position);             // Remove from UI list box
                family.members.remove(position);    // Remove from LinkedList
            }
        }
    }
        
    /**
     * The associated code with the button to return to main UI
     */
    private void returnToMainScreen() {
        new WelcomeUI();                            // Launch other UI
        this.dispose();                             // Dispose of this UI
    }
    
    /**
     * The associated code with the user closing this UI (by clicking the "X")
     */
    private void closeWindow() {
        Globals.end();
    }
    
}
