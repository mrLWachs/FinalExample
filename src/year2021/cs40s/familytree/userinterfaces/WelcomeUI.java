
/** Required package class namespace */
package year2021.cs40s.familytree.userinterfaces;

/** Required imports */
import year2021.cs40s.familytree.datastructures.Family;
import year2021.cs40s.familytree.datastructures.Globals;


/**
 * WelcomeUI.java - This user interface (UI) is the first and main screen to
 * look at all existing families or create a new family
 *
 * @author Mr. Wachs' student 
 * @since Mar. 17, 2021 
 */
public class WelcomeUI extends javax.swing.JFrame {

    // <editor-fold defaultstate="collapsed" desc="All NetBeans Generated Code collapsed in NetBeans">  
    
    /**
     * Creates new form WecloneScreen
     */
    public WelcomeUI() {
        initComponents();
        startup();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(null);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome to the Family Tree Maker");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(10, 10, 430, 70);

        jButton1.setText("Edit an Existing Family Tree");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1);
        jButton1.setBounds(230, 90, 210, 70);

        jButton3.setText("Create a New Family Tree");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(10, 90, 210, 70);

        jButton2.setText("See the planning documents for this project");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2);
        jButton2.setBounds(10, 170, 430, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        createANewFamilyTree();       
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        editAnExistingFamilyTree();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeWindow();
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        seePlanningDocuments();
    }//GEN-LAST:event_jButton2ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    // </editor-fold> 
        
    
    /**
     * When the constructor for this class is call (when the UI appears), set
     * the staring conditions for this class
     */
    private void startup() {
        Globals.startup(this, 456, 255);
    }
    
    /**
     * The associated code with the button to create a new family
     */
    private void createANewFamilyTree() {        
        // Create a dialog prompt to ask the user for a family name using a
        // constant and a variable as well as using the Dialog class in the
        // Globals class to create a dialog input 
        String prompt = "Enter a name for this new family";
        String familyName = Globals.dialogs.input(prompt);
        
        // Do not allow the user to leave the dialog empty 
        while (familyName == null || familyName.equals("")) {
            familyName = Globals.dialogs.inputError(Globals.ERROR + prompt);
        }
        
        // Confirm that this is the name the user wants to use by again using 
        // the Dialogs class with a yes/no dialog
        prompt = "Are you sure you want to use the family name '" +
                 familyName + "' ?";
        
        // The user has clicked yes
        if (Globals.dialogs.yesNo(prompt)) {
            
            // Create a new Family object
            Family family = new Family(familyName);
            
            // Search the list of families in the Globals LinkedList (using an
            // existing method in that class we developed during our class
            // example) and if the name already exists, do not allow it
            if (Globals.families.contains(family)) {                
                // Tell the user they cannot use that name
                prompt = "The family name '" + familyName + "' already exists"
                        + " in the database!";
                Globals.dialogs.error(prompt);
            }
            else {
                // This name is ok, add the new Family object to the 
                // LinkedList in the Globals class
                Globals.families.add(family);
            }
        }        
    }
    
    /**
     * The associated code with the button to edit an existing family
     */
    private void editAnExistingFamilyTree() {
        new ChooseFamilyUI();                   // Launch new UI
        this.dispose();                         // Dispose of this UI
    }
    
    private void seePlanningDocuments() {
        new PlanningUI();                       // Launch new UI
        this.dispose();                         // Dispose of this UI
    }
    
    /**
     * The associated code with the user closing this UI (by clicking the "X")
     */
    private void closeWindow() {
        Globals.end();
    }

}
