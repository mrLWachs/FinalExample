
/** required package class namespace */
package year2020.cs30S.gridlines;

/** required imports */
import java.awt.Color;
import java.awt.Font;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import static javax.swing.SwingConstants.CENTER;


/**
 * UserInterface.java - a solution to the drawing of line problem between
 * 2 points using a grid
 *
 * @author Mr. Wachs
 * @since Jan. 9, 2020, 12:56:39 p.m.
 */
public class UserInterface extends javax.swing.JFrame 
{

    /** 
     * Default constructor, creates new form UserInterface 
     */
    public UserInterface() {
        initComponents();
        initObjects();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(null);
        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 10, 1200, 900);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    // Global variables for the problem    
    private JLabel[][] matrix;
    private int column1;
    private int column2;
    private int row1;
    private int row2;
    private int clickCount;
    
    
    /**
     * Initialize all objects in the solution
     */
    private void initObjects() {
        // get the size of the panel to draw inside of
        int width  = jPanel1.getWidth();
        int height = jPanel1.getHeight();
        // now adjust the frame size to match that
        int frameWidth  = width  + 40;
        int frameHeight = height + 60;
        // set the frame look and feel
        setSize(frameWidth, frameHeight);
        setResizable(false);
        setLocationRelativeTo(null);
        // the set sizes of the labels
        final int WIDTH  = 20;
        final int HEIGHT = WIDTH;
        // calculate how many rows and columns we can draw of that size
        int rows   = height / HEIGHT;
        int colums = width  / WIDTH;
        // instantiate the matrix
        matrix = new JLabel[rows][colums];
        // now loop through and build all the labels
        int y = 0;
        // traverse all the rows
        for (int row = 0; row < matrix.length; row++) {
            int x = 0;
            // traverse all the columns
            for (int column = 0; column < matrix[row].length; column++) {
                createLabel(matrix, row, column, x, y, WIDTH, HEIGHT);
                // move x location past this label
                x += WIDTH;
            }
            // move y location past this row for the next row
            y += HEIGHT;
        }
        // set the first click
        clickCount = 1;
    }

    /**
     * Creates a label object at this location in the matrix on the panel
     * of the passed size
     * 
     * @param matrix the matrix to add the label to
     * @param row the row in the matrix for the label
     * @param column the column in the matrix for the label
     * @param x the x coordinate to draw the label in the panel
     * @param y the y coordinate to draw the label in the panel
     * @param width the width to draw the label to
     * @param height the height to draw the label to 
     */
    private void createLabel(JLabel[][] matrix, int row, int column, 
            int x, int y, int width, int height) {
        matrix[row][column] = new JLabel();
        setLook(row, column);
        setAction(row, column);
        jPanel1.add(matrix[row][column]);
        matrix[row][column].setBounds(x, y, width, height);
    }

    private void setLook(int row, int column) {
        matrix[row][column].setFont(new Font("Arial Narrow",Font.PLAIN,7));
        matrix[row][column].setHorizontalAlignment(CENTER);
        matrix[row][column].setText(row + "," + column);
        matrix[row][column].setBorder(BorderFactory.createLineBorder(Color.lightGray));
        matrix[row][column].setOpaque(true);
        matrix[row][column].setBackground(Color.white);
        matrix[row][column].setForeground(Color.lightGray);
    }
    
    private void setAction(int row, int column) {
        matrix[row][column].addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e) {
                mouseClick(row,column);
            }
            public void mousePressed(MouseEvent e) { }
            public void mouseReleased(MouseEvent e) { }
            public void mouseEntered(MouseEvent e) { }
            public void mouseExited(MouseEvent e) { }
        });
    }

    private void mouseClick(int row, int column) {
        if (clickCount == 1) {
            matrix[row][column].setBackground(Color.red);
            column1 = column;
            row1 = row;
            clickCount = 2;
        }
        else if (clickCount == 2) {
            matrix[row][column].setBackground(Color.blue);
            column2 = column;
            row2 = row;
            clickCount = 1;
            drawLine();
        }
    }

    private void drawLine() {    
        int start = 0;
        int end   = 0;
        double x1 = (double)column1;
        double x2 = (double)column2;
        double y1 = (double)row1;
        double y2 = (double)row2;
        if (column1 == column2) {
            if (row1 < row2) {
                start = row1 + 1;
                end   = row2;
            }
            else {
                end    = row1;
                start  = row2 + 1;
            }
            for (double y = start; y < end; y++) {
                int row    = (int)y;
                int column = (int)x1;
                matrix[row][column].setBackground(Color.yellow);
            }
        }
        else if (Math.abs(row1 - row2) < Math.abs(column1 - column2)) {  
            if (column1 < column2) {
                start = column1 + 1;
                end   = column2;
            }
            else {
                end    = column1;
                start  = column2 + 1;
            }
            for (double x = start; x < end; x++) {                
                double m = (y2 - y1) / (x2 - x1);
                double b = y2 - (m * x2);
                double y = m * x + b;
                int row    = (int)y;
                int column = (int)x;
                matrix[row][column].setBackground(Color.yellow);
            }
        }        
        else {
            if (row1 < row2) {
                start = row1 + 1;
                end   = row2;
            }
            else {
                end    = row1;
                start  = row2 + 1;
            }
            for (double y = start; y < end; y++) {
                double m = (y2 - y1) / (x2 - x1);
                double b = y2 - (m * x2);
                double x = (y - b) / m;
                int row    = (int)y;
                int column = (int)x;
                matrix[row][column].setBackground(Color.yellow);
            }
        }
    }
    

}
