
/** Required package class namespace */
package year2022.cs40s.clickypictures;


import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.Timer;
import year2020.cs40s.awards.collections.LinkedList;

/** 
 * UserInterface.java - The frame/form user interface (container) for the
 * clicking pictures game
 *
 * @author Mr. Wachs 
 * @since 19-Jan-2022 
*/
public class UserInterface extends javax.swing.JFrame {

    /**
     * Constructor method (written by NetBeans designer) that creates new 
     * form UserInterface
     */
    public UserInterface() {
        initComponents();
        
        // Now calls to custom methods (written below) or any other needed code
        // not provided by the NetBeans designer
        setFrame();
        setDataStructures();
        this.setVisible(true);                  // Show to the user
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Properties (global variables)..........................................
    
    // Variable objects (including collections)
    private LinkedList<JLabel> imageList;   // Collection of labels for images
    private Timer timer;                    // Timer to make images appear
    private int imageCount;                 // Tracks the images being displayed
    private int clickCount;                 // Track how many images clicked
        
    // Constants
    private final int    FRAME_WIDTH      = 1200;
    private final int    FRAME_HEIGHT     = 900;
    private final int    DELAY            = 2000;
    private final int    IMAGE_WIDTH      = 80;
    private final int    IMAGE_HEIGHT     = 65;    
    private final String FIRST_NAME       = "E:\\File Backup\\Work\\"
            + "2021-2022\\NetBeansProjects\\ClickyPictures\\src\\media\\";
    private final String MIDDLE_NAME      = "picture";
    private final String LAST_NAME        = ".gif";
    private final Color  HOVER_COLOR      = new Color(224,224,224);
    private final Color  FRAME_BACKGROUND = new Color(255,255,255);
    
    
    /**
     * Sets the properties of the frame/form user interface (UI)
     */
    private void setFrame() {
        this.setSize(FRAME_WIDTH,FRAME_HEIGHT);     // Set the size
        this.setResizable(false);                   // Do not allow resize
        this.setLocationRelativeTo(null);           // Center on the screen
        this.setBackground(FRAME_BACKGROUND);       // Set background color
        this.getContentPane().setBackground(Color.white);        
    }

    /**
     * Set the data structures (variables) and objects not created by the 
     * designer
     */
    private void setDataStructures() {
        imageCount = 0;                                 // Set starting value
        clickCount = 0;
        imageList = new LinkedList<>();                 // Instantiate list
        timer = new Timer(DELAY, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                tick();                                 // Jump to method
            }
        });
        timer.start();                                  // Start the timer
    }
    
    /**
     * Timer code runs in a 'loop' based on the time (in milliseconds) set in
     * the timer's delay (1000 milliseconds = 1 second)
     */
    private void tick() {
        imageCount++;                           // Count an image as clicked    
        String filename = FIRST_NAME + 
                          MIDDLE_NAME + 
                          LAST_NAME;            // The image file
        Icon icon = new ImageIcon(filename);    // Icon for the label
        JLabel label = new JLabel(icon);        // Create a label object                      
        this.getContentPane().add(label);       // Add object to container 
        
        // Create a random location
        int x = (int)((((double)(FRAME_WIDTH-IMAGE_WIDTH))+1d)*Math.random());
        int y = (int)((((double)(FRAME_HEIGHT-IMAGE_HEIGHT))+1d)*Math.random());
        
        // Now add a mouse event to this (and every other) label obejct
        // created by the timer
        label.addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent e)  {
                mouseClick(label);                      // Jump to method
            }
            public void mousePressed(MouseEvent e)  {            }
            public void mouseReleased(MouseEvent e) {            }
            public void mouseEntered(MouseEvent e)  {
                mouseOver(label, true);                 // Jump to method
            }
            public void mouseExited(MouseEvent e)   {
                mouseOver(label, false);                // Jump to method
            }
        });
        
        // Position the new label object in the container (which is the 
        // frame/form) at the random x,y and the pre-set width and height                        
        label.setBounds(x, y, IMAGE_WIDTH, IMAGE_HEIGHT);
        
        // Update the title of the form
        this.setTitle("Clicked " + clickCount + " images with " + 
                       imageCount + " images currently on screen");
        
        // Add the label to the linked list collection of label objects
        imageList.add(label);
    }

    /**
     * The action that should occur when the user clicks a label (image)
     * 
     * @param target the specific label object the mouse clicked on
     */
    private void mouseClick(JLabel target) {
        // We find the location of the target label clicked on in the 
        // collection (Linked List) of labels - using a builtin method of
        // the linkedlist class we created
        int location = imageList.firstIndexOf(target);
        
        // Now using an accessor method to get that label we found out of 
        // the list
        JLabel label = imageList.get(location);
        
        // Error check to make sure the label was found
        if (label != null) {
            clickCount++;                           // Count this as clicked
            imageCount--;                           // Reduce this count
            label.setVisible(false);                // Hide label
            this.getContentPane().remove(label);    // Remove from container            
            imageList.remove(location);             // Remove from list
            
            // Update the title of the form
            this.setTitle("Clicked " + clickCount + " image with " + 
                    imageCount + " images currently on screen");
        }
    }
    
    /**
     * The action that should occur when the user's mouse hovers over or
     * moves outside of a label (image)
     * 
     * @param target the specific label object the mouse is hovering over or 
     *               moving outside of
     * @param isOver flag is the mouse is over the label or moving outside
     *               of this label (image)
     */
    private void mouseOver(JLabel target, boolean isOver) {
        // Same code as in mouse click to get the label clicked on
        int location = imageList.firstIndexOf(target);
        JLabel label = imageList.get(location);        
        // Error check to make sure the label was found
        if (label != null) {
            if (isOver) {       
                label.setOpaque(true);              // Make able to have color 
                label.setBackground(HOVER_COLOR);   // Set label background 
            }
            else {
                label.setOpaque(false);             // No color
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
